/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.StudentRole;

/**
 *
 * @author User
 */

import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.CourseSchedule.SeatAssignment;
import info5100.university.example.CourseSchedule.Seat;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.StudentProfile;
import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.Persona.Faculty.FacultyProfile;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class StudentCourseRegistrationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentCourseRegistrationJPanel
     */
    private Department department;
    private StudentProfile studentProfile;
    public StudentCourseRegistrationJPanel(Department department, StudentProfile studentProfile) {
        initComponents();
        this.department = department;
        this.studentProfile = studentProfile;
        populateCourseTable(department.getCourseSchedule("Fall2025"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourses = new javax.swing.JTable();
        btnEnroll = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        lblCredits = new javax.swing.JLabel();

        jLabel1.setText("Course Registration");

        jLabel2.setText("Term");

        jLabel3.setText("Criteria");

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course ID", "Teacher", "Semester" }));
        cmbSearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSearchTypeActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCourses);

        btnEnroll.setText("Enroll");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        btnDrop.setText("Drop Course");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        lblCredits.setText("Total enrolled credits");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnSearch)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDrop)
                    .addComponent(btnEnroll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(lblCredits)
                .addGap(109, 109, 109))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEnroll)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblCredits)
                        .addGap(3, 3, 3)))
                .addComponent(btnDrop)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSearchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSearchTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSearchTypeActionPerformed

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCourses.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a course to enroll.");
        return;
    }

    String courseId = (String) tblCourses.getValueAt(selectedRow, 0);
    CourseSchedule courseSchedule = department.getCourseSchedule("Fall2025");
    CourseOffer selectedOffer = courseSchedule.getCourseOfferByNumber(courseId);

    if (selectedOffer == null) {
        JOptionPane.showMessageDialog(this, "Course not found in schedule.");
        return;
    }

    // Current semester course load
    CourseLoad currentLoad = studentProfile.getCurrentCourseLoad();
    if (currentLoad == null) {
        currentLoad = new CourseLoad("Fall2025");
       studentProfile.getTranscript().setCurrentCourseLoad(currentLoad);

    }

    // Calculate current credit hours
    int totalCredits = 0;
    for (SeatAssignment sa : currentLoad.getSeatAssignments()) {
        totalCredits += sa.getCreditHours();
    }

    int newCredits = selectedOffer.getCreditHours();
    if (totalCredits + newCredits > 8) {
        JOptionPane.showMessageDialog(this, "You cannot enroll in more than 8 credit hours per semester.");
        return;
    }

    SeatAssignment newSeat = selectedOffer.assignEmptySeat(currentLoad);
    if (newSeat == null) {
        JOptionPane.showMessageDialog(this, "No available seats in this course.");
        return;
    }

    JOptionPane.showMessageDialog(this, "Successfully enrolled in: " + courseId);
    updateEnrolledCredits();
       
    }//GEN-LAST:event_btnEnrollActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCourses.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a course to drop.");
        return;
    }

    String courseId = (String) tblCourses.getValueAt(selectedRow, 0);
    CourseLoad currentLoad = studentProfile.getCurrentCourseLoad();

    if (currentLoad == null) {
        JOptionPane.showMessageDialog(this, "You are not enrolled in any courses.");
        return;
    }

    // Find the course to drop
    SeatAssignment seatToDrop = null;
    for (SeatAssignment sa : currentLoad.getSeatAssignments()) {
        if (sa.getCourseOffer().getCourseNumber().equals(courseId)) {
            seatToDrop = sa;
            break;
        }
    }

    if (seatToDrop == null) {
        JOptionPane.showMessageDialog(this, "You are not enrolled in this course.");
        return;
    }

    // Drop logic: remove from list
    currentLoad.getSeatAssignments().remove(seatToDrop);
    seatToDrop.getSeat().setOccupied(false); // mark seat available again

    JOptionPane.showMessageDialog(this, "Dropped course: " + courseId);
    updateEnrolledCredits();
    }//GEN-LAST:event_btnDropActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchText = txtSearch.getText().trim().toLowerCase();
    String searchType = (String) cmbSearchType.getSelectedItem();
    CourseSchedule schedule = department.getCourseSchedule("Fall2025");

    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    model.setRowCount(0);

    if (schedule == null) return;

    try {
        java.lang.reflect.Field scheduleField = CourseSchedule.class.getDeclaredField("schedule");
        scheduleField.setAccessible(true);
        @SuppressWarnings("unchecked")
        ArrayList<CourseOffer> offers = (ArrayList<CourseOffer>) scheduleField.get(schedule);

        for (CourseOffer offer : offers) {
            if (offer == null || offer.getSubjectCourse() == null) continue;
            String courseId = offer.getCourseNumber().toLowerCase();
            String courseName = offer.getSubjectCourse().getCourseName().toLowerCase();

            boolean match = false;
            if (searchType.equals("Course ID") && courseId.contains(searchText)) match = true;
            if (searchType.equals("Teacher")) {
                String instructor = "";
                if (offer.getFacultyProfile() != null && offer.getFacultyProfile().getPerson() != null) {
                    instructor = offer.getFacultyProfile().getPerson().getName().toLowerCase();
                }
                if (instructor.contains(searchText)) match = true;
            }

            if (match) {
                model.addRow(new Object[]{
                    offer.getCourseNumber(),
                    offer.getSubjectCourse().getCourseName(),
                    offer.getFacultyProfile() != null ? offer.getFacultyProfile().getPerson().getName() : "Unassigned",
                    offer.getCreditHours(),
                    offer.getSubjectCourse().getCredits()
                });
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JTable tblCourses;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

   private void populateCourseTable(CourseSchedule courseSchedule) {
    DefaultTableModel model = (DefaultTableModel) tblCourses.getModel();
    model.setRowCount(0);

    if (courseSchedule == null) {
        JOptionPane.showMessageDialog(this, "No course schedule available for this term.");
        return;
    }

    model.setColumnIdentifiers(new String[]{
        "Course ID", "Course Name", "Instructor", "Credits", "Available Seats"
    });

    try {
        // Access private schedule list in CourseSchedule
        java.lang.reflect.Field scheduleField = CourseSchedule.class.getDeclaredField("schedule");
        scheduleField.setAccessible(true);
        @SuppressWarnings("unchecked")
        ArrayList<CourseOffer> offers = (ArrayList<CourseOffer>) scheduleField.get(courseSchedule);

        for (CourseOffer offer : offers) {
            if (offer == null || offer.getSubjectCourse() == null) continue;

            String courseId = offer.getCourseNumber();

            // ✅ Fix 1: Course name getter
            // (Your Course.java likely has getCourseName() or getCOurseName())
            String courseName;
            try {
                courseName = offer.getSubjectCourse().getCourseName();
            } catch (Exception e) {
                // fallback if method name is different
                courseName = offer.getSubjectCourse().getCOurseNumber();
            }

            int credits = offer.getCreditHours();

            // ✅ Fix 2: Faculty name getter
            String instructor = "Unassigned";
            FacultyProfile facultyProfile = offer.getFacultyProfile();
            if (facultyProfile != null) {
                try {
                    // if Person class has getName()
                    instructor = facultyProfile.getPerson().getName();
                } catch (Exception e) {
                    // fallback in case method name differs
                    instructor = "Unknown";
                }
            }

            // ✅ Seat availability
            java.lang.reflect.Field seatField = CourseOffer.class.getDeclaredField("seatlist");
            seatField.setAccessible(true);
            @SuppressWarnings("unchecked")
            ArrayList<Seat> seats = (ArrayList<Seat>) seatField.get(offer);

            int totalSeats = seats.size();
            int occupiedSeats = 0;
            for (Seat s : seats) {
                if (s.isOccupied()) occupiedSeats++;
            }
            int availableSeats = totalSeats - occupiedSeats;

            model.addRow(new Object[]{courseId, courseName, instructor, credits, availableSeats});
        }

        updateEnrolledCredits();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error populating course table: " + e.getMessage());
    }
    
}
   private void updateEnrolledCredits() {
    int totalCredits = 0;
    CourseLoad currentLoad = studentProfile.getCurrentCourseLoad();

    if (currentLoad != null) {
        for (SeatAssignment sa : currentLoad.getSeatAssignments()) {
            if (sa != null) {
                totalCredits += sa.getCreditHours();
            }
        }
    }

    lblCredits.setText("Total enrolled credits: " + totalCredits);
}
}

