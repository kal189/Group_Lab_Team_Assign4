/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.FacultyRole;

import Business.Business;
import Business.Profiles.EmployeeProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author saipraharshith
 */
public class ManageStudentGradesJPanel extends javax.swing.JPanel {
    

    // ====== ADD THESE VARIABLES ======
    Business business;
    EmployeeProfile facultyProfile;
    JPanel CardSequencePanel;
    
    // Grade conversion map
    private static final double[][] GRADE_SCALE = {
        {93, 100, 4.0},  // A
        {90, 92, 3.7},   // A-
        {87, 89, 3.3},   // B+
        {83, 86, 3.0},   // B
        {80, 82, 2.7},   // B-
        {77, 79, 2.3},   // C+
        {73, 76, 2.0},   // C
        {70, 72, 1.7},   // C-
        {0, 69, 0.0}     // F
    };
    
    private static final String[] LETTER_GRADES = {
        "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "F"
    };

    /**
     * Creates new form ManageStudentGradesJPanel
     */
    public ManageStudentGradesJPanel(Business bz, EmployeeProfile fp, JPanel jp) {
    this.business = bz;
    this.facultyProfile = fp;
    this.CardSequencePanel = jp;
    initComponents();
    setupTable();
    populateCourseDropdown();
    populateStudents();
    calculateClassGPA();
    calculateTotalTuition();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSelectCourse = new javax.swing.JLabel();
        cmbCourses = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        lblClassGPA = new javax.swing.JLabel();
        txtClassGPA = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblTuition = new javax.swing.JLabel();
        txtTuition = new javax.swing.JTextField();

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setText("Student Management & Grading");

        lblSelectCourse.setText("Select Course:");

        cmbCourses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "INFO 5100 - Application Engineering", "INFO 6150 - Web Design", "INFO 5001 - Data Structures" }));
        cmbCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCoursesActionPerformed(evt);
            }
        });

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Grade %", "Letter", "GPA", "Rank"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudents);

        lblClassGPA.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblClassGPA.setText("Class GPA:");

        txtClassGPA.setEditable(false);
        txtClassGPA.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtClassGPA.setText("0.00");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTuition.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTuition.setText("Total Tuition Collected:");

        txtTuition.setEditable(false);
        txtTuition.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtTuition.setText("$0.00");
        txtTuition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTuitionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSelectCourse)
                                .addGap(147, 147, 147)
                                .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblClassGPA)
                            .addComponent(lblTuition))
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTuition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtClassGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTitle)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectCourse)
                    .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblClassGPA)
                    .addComponent(txtClassGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTuition)
                    .addComponent(txtTuition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCoursesActionPerformed
        populateStudents();
        calculateClassGPA();
        calculateTotalTuition();
    }//GEN-LAST:event_cmbCoursesActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        CardSequencePanel.remove(this);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtTuitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTuitionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTuitionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cmbCourses;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClassGPA;
    private javax.swing.JLabel lblSelectCourse;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTuition;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField txtClassGPA;
    private javax.swing.JTextField txtTuition;
    // End of variables declaration//GEN-END:variables

    private void setupTable() {
        // Enable cell editing to save when focus lost
        tblStudents.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        
        // Add listener to recalculate when grade changes
        tblStudents.getModel().addTableModelListener(e -> {
            if (e.getColumn() == 2) { // Grade % column
                int row = e.getFirstRow();
                updateStudentGrade(row);
                rankStudents();
                calculateClassGPA();
                calculateTotalTuition();
            }
        });
        
        // Set column widths
        tblStudents.getColumnModel().getColumn(0).setPreferredWidth(80);  // Student ID
        tblStudents.getColumnModel().getColumn(1).setPreferredWidth(200); // Name
        tblStudents.getColumnModel().getColumn(2).setPreferredWidth(80);  // Grade %
        tblStudents.getColumnModel().getColumn(3).setPreferredWidth(60);  // Letter
        tblStudents.getColumnModel().getColumn(4).setPreferredWidth(60);  // GPA
        tblStudents.getColumnModel().getColumn(5).setPreferredWidth(60);  // Rank
    }

    private void populateCourseDropdown() {
        cmbCourses.removeAllItems();
        cmbCourses.addItem("INFO 5100 - Application Engineering");
        cmbCourses.addItem("INFO 6150 - Web Design");
        cmbCourses.addItem("INFO 5001 - Data Structures");
    }

    private void populateStudents() {
    DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
    model.setRowCount(0);
    
    // Get selected course
    String selectedCourse = (String) cmbCourses.getSelectedItem();
    
    if (selectedCourse == null) return;
    
    // Different students per course
    if (selectedCourse.contains("INFO 5100")) {
        Object[][] students = {
            {"S001", "Adam Rollen", 95.0, "A", 4.0, 1},
            {"S002", "Emma Thompson", 88.0, "B+", 3.3, 2},
            {"S003", "Oliver Davis", 92.0, "A-", 3.7, 3},
            {"S004", "Sophia Miller", 85.0, "B", 3.0, 4},
            {"S005", "Liam Rodriguez", 78.0, "C+", 2.3, 5}
        };
        for (Object[] student : students) {
            model.addRow(student);
        }
    } else if (selectedCourse.contains("INFO 6150")) {
        Object[][] students = {
            {"S006", "Ava Martinez", 90.0, "A-", 3.7, 1},
            {"S007", "Noah Jackson", 87.0, "B+", 3.3, 2},
            {"S008", "Isabella Harris", 93.0, "A", 4.0, 3},
            {"S009", "Ethan Clark", 80.0, "B-", 2.7, 4}
        };
        for (Object[] student : students) {
            model.addRow(student);
        }
    } else if (selectedCourse.contains("INFO 5001")) {
        Object[][] students = {
            {"S003", "Oliver Davis", 89.0, "B+", 3.3, 1},
            {"S005", "Liam Rodriguez", 83.0, "B", 3.0, 2},
            {"S010", "Mia Lewis", 91.0, "A-", 3.7, 3}
        };
        for (Object[] student : students) {
            model.addRow(student);
        }
    }
    
    rankStudents();
}

    private void updateStudentGrade(int row) {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        
        try {
            Object gradeObj = model.getValueAt(row, 2); // Grade % column
            if (gradeObj == null) return;
            
            double gradePercent = Double.parseDouble(gradeObj.toString());
            
            // Validate grade
            if (gradePercent < 0 || gradePercent > 100) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Grade must be between 0 and 100!",
                    "Invalid Grade",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                model.setValueAt(0.0, row, 2);
                return;
            }
            
            // Calculate letter grade and GPA
            String letterGrade = convertToLetterGrade(gradePercent);
            double gpa = convertToGPA(gradePercent);
            
            // Update table
            model.setValueAt(letterGrade, row, 3); // Letter column
            model.setValueAt(gpa, row, 4);         // GPA column
            
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Please enter a valid number!",
                "Invalid Input",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private String convertToLetterGrade(double gradePercent) {
        for (int i = 0; i < GRADE_SCALE.length; i++) {
            if (gradePercent >= GRADE_SCALE[i][0] && gradePercent <= GRADE_SCALE[i][1]) {
                return LETTER_GRADES[i];
            }
        }
        return "F";
    }

    private double convertToGPA(double gradePercent) {
        for (int i = 0; i < GRADE_SCALE.length; i++) {
            if (gradePercent >= GRADE_SCALE[i][0] && gradePercent <= GRADE_SCALE[i][1]) {
                return GRADE_SCALE[i][2];
            }
        }
        return 0.0;
    }

    private void rankStudents() {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        int rowCount = model.getRowCount();
        if (rowCount == 0) return;
        
        // Create list of students with their grades
        List<StudentGradeData> studentData = new ArrayList<>();
        for (int i = 0; i < rowCount; i++) {
            Object gradeObj = model.getValueAt(i, 2);
            if (gradeObj != null) {
                double grade = Double.parseDouble(gradeObj.toString());
                studentData.add(new StudentGradeData(i, grade));
            }
        }
        
        // Sort by grade (descending - highest first)
        studentData.sort((a, b) -> Double.compare(b.grade, a.grade));
        
        // Assign ranks (handle ties)
        int currentRank = 1;
        double lastGrade = -1;
        for (int i = 0; i < studentData.size(); i++) {
            StudentGradeData data = studentData.get(i);
            
            if (data.grade != lastGrade) {
                currentRank = i + 1;
            }
            
            model.setValueAt(currentRank, data.rowIndex, 5); // Rank column
            lastGrade = data.grade;
        }
    }

    private void calculateClassGPA() {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        int rowCount = model.getRowCount();
        
        if (rowCount == 0) {
            txtClassGPA.setText("0.00");
            return;
        }
        
        double totalGPA = 0.0;
        int validCount = 0;
        
        for (int i = 0; i < rowCount; i++) {
            Object gpaObj = model.getValueAt(i, 4); // GPA column
            if (gpaObj != null) {
                double gpa = Double.parseDouble(gpaObj.toString());
                totalGPA += gpa;
                validCount++;
            }
        }
        
        double classGPA = validCount > 0 ? totalGPA / validCount : 0.0;
        txtClassGPA.setText(String.format("%.2f", classGPA));
    }
    private void calculateTotalTuition() {
        // Get selected course info
        String selectedCourse = (String) cmbCourses.getSelectedItem();
        
        // Get number of enrolled students
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        int enrolledCount = model.getRowCount();
        
        // Parse credit hours from course name
        int creditHours = 4; // Default (most courses are 4 credits)
        
        // Tuition calculation: $500 per credit hour per student
        int TUITION_PER_CREDIT = 500;
        int totalTuition = enrolledCount * creditHours * TUITION_PER_CREDIT;
        
        // Display formatted tuition
        txtTuition.setText(String.format("$%,d.00", totalTuition));
    }

    // Helper class for ranking
    private static class StudentGradeData {
        int rowIndex;
        double grade;
        
        StudentGradeData(int row, double grade) {
            this.rowIndex = row;
            this.grade = grade;
        }
    }
        
}


